(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{227:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return o})),n.d(a,"metadata",(function(){return i})),n.d(a,"toc",(function(){return c})),n.d(a,"default",(function(){return l}));var t=n(5),p=n(10),r=(n(2),n(348)),o={id:"java-resolvers",title:"Java Resolvers"},i={unversionedId:"plugins/java-resolvers",id:"plugins/java-resolvers",isDocsHomePage:!1,title:"Java Resolvers",description:"The java-resolvers plugin creates Java interfaces for the resolvers signature.",source:"@site/docs/plugins/java-resolvers.md",slug:"/plugins/java-resolvers",permalink:"/docs/plugins/java-resolvers",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/java-resolvers.md",version:"current",sidebar:"sidebar",previous:{title:"Java",permalink:"/docs/plugins/java"},next:{title:"Java Apollo Android",permalink:"/docs/plugins/java-apollo-android"}},c=[{value:"Prepare your environment",id:"prepare-your-environment",children:[]}],b={toc:c};function l(e){var a=e.components,n=Object(p.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},b,n,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"java-resolvers")," plugin creates Java ",Object(r.b)("inlineCode",{parentName:"p"},"interface"),"s for the resolvers signature."),Object(r.b)("p",null,"It works with ",Object(r.b)("inlineCode",{parentName:"p"},"graphql-java")," library and it uses it's ",Object(r.b)("inlineCode",{parentName:"p"},"DataFetcher")," API."),Object(r.b)("p",null,"You can use this plugin to generate interfaces and later implement them, this way you can always tell if one of the fields is missing a resolvers:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"import com.my.app.generated.Resolvers;\nimport com.my.app.models.User;\nimport graphql.schema.DataFetcher;\n\nexport class QueryResolvers implements Resolvers.Query {\n  public DataFetcher<String> id() {\n        return environment -> environment.<User>getSource().getId();\n    }\n}\n")),Object(r.b)("h2",{id:"prepare-your-environment"},"Prepare your environment"),Object(r.b)("p",null,Object(r.b)("p",{parentName:"p"},"To use the GraphQL Code Generator with Java, start by adding the ",Object(r.b)("a",{parentName:"p",href:"https://plugins.gradle.org/plugin/com.moowork.node"},"com.moowork.node")," Gradle plugin to your ",Object(r.b)("inlineCode",{parentName:"p"},"build.gradle"),":"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre"},'plugins {\n  id "com.moowork.node" version "1.3.1"\n}\n')),Object(r.b)("p",{parentName:"p"},"Then, add the following in order to make sure you are running the code-generator on each build:"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre"},"build.dependsOn yarn\n")),Object(r.b)("p",{parentName:"p"},"Then, create a ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")," file in your project root, with the following content:"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "java-app",\n  "scripts": {\n    "postinstall": "graphql-codegen"\n  },\n  "dependencies": {\n    "graphql": "14.5.8",\n    "@graphql-codegen/cli": "1.7.0",\n    "@graphql-codegen/RELEVANT_PLUGIN": "1.7.0"\n  }\n}\n')),Object(r.b)("blockquote",{parentName:"p"},Object(r.b)("p",{parentName:"blockquote"},"Make sure to use the latest version of codegen and the plugins, and replace ",Object(r.b)("inlineCode",{parentName:"p"},"RELEVANT_PLUGIN")," with your plugin name.")),Object(r.b)("p",{parentName:"p"},"Then, create ",Object(r.b)("inlineCode",{parentName:"p"},"codegen.yml")," file in your root directory, pointing to your schema, and add the plugins you need. For example:"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre"},"schema: src/main/resources/schema.graphqls\ngenerates:\n  src/main/java/com/my-name/my-app/generated/File.java:\n    - RELEVANT_PLUGIN\n")),Object(r.b)("blockquote",{parentName:"p"},Object(r.b)("p",{parentName:"blockquote"},"Replace ",Object(r.b)("inlineCode",{parentName:"p"},"RELEVANT_PLUGIN")," with your plugin name.")),Object(r.b)("p",{parentName:"p"},"Also, make sure you add the following to your ",Object(r.b)("inlineCode",{parentName:"p"},".gitignore")," file:"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre"},"yarn.lock\nnode_modules\n")),Object(r.b)("p",{parentName:"p"},"Now, run ",Object(r.b)("inlineCode",{parentName:"p"},"gradle yarn")," to install the dependencies for the first time."),Object(r.b)("p",{parentName:"p"},"Next time, the codegen will run automatically each time you run your Gradle build script.")),Object(r.b)("p",null,Object(r.b)("h2",{parentName:"p"},"Installation"),Object(r.b)("img",{alt:"java-resolvers plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/java-resolvers?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),Object(r.b)("div",{parentName:"p",className:"admonition admonition-shell"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},Object(r.b)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),Object(r.b)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",Object(r.b)("inlineCode",{parentName:"h5"},"yarn"))),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",{parentName:"pre"},"yarn add -D @graphql-codegen/java-resolvers\n")))),Object(r.b)("h2",{parentName:"p"},"API Reference"),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"package")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"string")),Object(r.b)("p",{parentName:"p"},"Customize the Java package name. The default package name will be generated according to the output file path."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/java/my-org/my-app/Resolvers.java:\n    plugins:\n      - java-resolvers\n    config:\n      package: custom.package.name\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"mappers")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"object")),Object(r.b)("p",{parentName:"p"},"Allow you to replace specific GraphQL types with your custom model classes. This is useful when you want to make sure your resolvers returns the correct class.\nThe default value is the values set by ",Object(r.b)("inlineCode",{parentName:"p"},"defaultMapper")," configuration.\nYou can use a direct path to the package, or use ",Object(r.b)("inlineCode",{parentName:"p"},"package#class")," syntax to have it imported."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/java/my-org/my-app/Resolvers.java:\n    plugins:\n      - java-resolvers\n    config:\n      mappers:\n        User: com.app.models#UserObject\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"defaultMapper")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"Object")),Object(r.b)("p",{parentName:"p"},"Sets the default mapper value in case it's not specified by ",Object(r.b)("inlineCode",{parentName:"p"},"mappers"),".\nYou can use a direct path to the package, or use ",Object(r.b)("inlineCode",{parentName:"p"},"package#class")," syntax to have it imported.\nThe default mapper is Java's ",Object(r.b)("inlineCode",{parentName:"p"},"Object"),"."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/java/my-org/my-app/Resolvers.java:\n    plugins:\n      - java-resolvers\n    config:\n      defaultMapper: my.app.models.BaseEntity\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"className")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"Resolvers")),Object(r.b)("p",{parentName:"p"},"Allow you to customize the parent class name."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/java/my-org/my-app/Resolvers.java:\n    plugins:\n      - java-resolvers\n    config:\n      className: MyResolvers\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"listType")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"Iterable")),Object(r.b)("p",{parentName:"p"},"Allow you to customize the list type."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/java/my-org/my-app/Resolvers.java:\n    plugins:\n      - java-resolvers\n    config:\n      listType: Map\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"strictScalars")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",{parentName:"p"},"Makes scalars strict."),Object(r.b)("p",{parentName:"p"},"If scalars are found in the schema that are not defined in ",Object(r.b)("inlineCode",{parentName:"p"},"scalars"),"\nan error will be thrown during codegen."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"config:\n  strictScalars: true\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"defaultScalarType")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"any")),Object(r.b)("p",{parentName:"p"},"Allows you to override the type that unknown scalars will have."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"config:\n  defaultScalarType: unknown\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"scalars")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"ScalarsMap")),Object(r.b)("p",{parentName:"p"},"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"namingConvention")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"NamingConvention"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"change-case-all#pascalCase")),Object(r.b)("p",{parentName:"p"},"Allow you to override the naming convention of the output.\nYou can either override all namings, or specify an object with specific custom naming convention per output.\nThe format of the converter must be a valid ",Object(r.b)("inlineCode",{parentName:"p"},"module#method"),".\nAllowed values for specific output are: ",Object(r.b)("inlineCode",{parentName:"p"},"typeNames"),", ",Object(r.b)("inlineCode",{parentName:"p"},"enumValues"),'.\nYou can also use "keep" to keep all GraphQL names as-is.\nAdditionally you can set ',Object(r.b)("inlineCode",{parentName:"p"},"transformUnderscore")," to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if you want to override the default behavior,\nwhich is to preserves underscores."),Object(r.b)("p",{parentName:"p"},"Available case functions in ",Object(r.b)("inlineCode",{parentName:"p"},"change-case-all")," are ",Object(r.b)("inlineCode",{parentName:"p"},"camelCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"capitalCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"constantCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"dotCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"headerCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"noCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"paramCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"pascalCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"pathCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sentenceCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"snakeCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"lowerCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"localeLowerCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"lowerCaseFirst"),", ",Object(r.b)("inlineCode",{parentName:"p"},"spongeCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"titleCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"upperCase"),", ",Object(r.b)("inlineCode",{parentName:"p"},"localeUpperCase")," and ",Object(r.b)("inlineCode",{parentName:"p"},"upperCaseFirst"),"\n",Object(r.b)("a",{parentName:"p",href:"https://github.com/btxtiger/change-case-all"},"See more")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"typesPrefix")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"\ndefault: ``"),Object(r.b)("p",{parentName:"p"},"Prefixes all the generated types."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"config:\n  typesPrefix: I\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"typesSuffix")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"\ndefault: ``"),Object(r.b)("p",{parentName:"p"},"Suffixes all the generated types."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"config:\n  typesSuffix: I\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"skipTypename")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",{parentName:"p"},"Does not add __typename to the generated types, unless it was specified in the selection set."),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"config:\n  skipTypename: true\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"nonOptionalTypename")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",{parentName:"p"},"Automatically adds ",Object(r.b)("inlineCode",{parentName:"p"},"__typename")," field to the generated types, even when they are not specified\nin the selection set, and makes it non-optional"),Object(r.b)("h4",{parentName:"p"},"Usage Examples"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",{parentName:"pre",className:"language-yml"},"config:\n  nonOptionalTypename: true\n")),Object(r.b)("h3",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"h3"},"useTypeImports")),Object(r.b)("p",{parentName:"p"},"type: ",Object(r.b)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",{parentName:"p"},"Will use ",Object(r.b)("inlineCode",{parentName:"p"},"import type {}")," rather than ",Object(r.b)("inlineCode",{parentName:"p"},"import {}"),' when importing only types. This gives\ncompatibility with TypeScript\'s "importsNotUsedAsValues": "error" option')))}l.isMDXComponent=!0},348:function(e,a,n){"use strict";n.d(a,"a",(function(){return s})),n.d(a,"b",(function(){return j}));var t=n(2),p=n.n(t);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function c(e,a){if(null==e)return{};var n,t,p=function(e,a){if(null==e)return{};var n,t,p={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(p[n]=e[n]);return p}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var b=p.a.createContext({}),l=function(e){var a=p.a.useContext(b),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},s=function(e){var a=l(e.components);return p.a.createElement(b.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return p.a.createElement(p.a.Fragment,{},a)}},d=p.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=l(n),d=t,j=s["".concat(o,".").concat(d)]||s[d]||m[d]||r;return n?p.a.createElement(j,i(i({ref:a},b),{},{components:n})):p.a.createElement(j,i({ref:a},b))}));function j(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var b=2;b<r;b++)o[b]=n[b];return p.a.createElement.apply(null,o)}return p.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);